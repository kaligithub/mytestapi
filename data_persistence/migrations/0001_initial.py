# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2017-01-05 07:20
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('categoryID', models.AutoField(primary_key=True, serialize=False)),
                ('categoryName', models.CharField(choices=[('T&C', 'T&C'), ('Reg Filing', 'Reg Filing'), ('M&A', 'M&A')], max_length=50)),
            ],
            options={
                'db_table': 'categories',
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='ChannelType',
            fields=[
                ('channelTypeID', models.AutoField(primary_key=True, serialize=False)),
                ('channelType', models.CharField(choices=[('Feed-ATOM', 'Feed-ATOM'), ('Feed-RSS', 'Feed-RSS'), ('Email', 'Email'), ('Web', 'Web')], max_length=50)),
            ],
            options={
                'db_table': 'channel_type',
            },
        ),
        migrations.CreateModel(
            name='ContentItem',
            fields=[
                ('contentItemID', models.AutoField(primary_key=True, serialize=False)),
                ('contentItemType', models.CharField(choices=[('News', 'News'), ('Press Release', 'Press Release'), ('Regulatory Filing', 'Regulatory Filing'), ('Opinion', 'Opinion'), ('Other', 'Other')], max_length=50)),
                ('contentType', models.CharField(choices=[('Text', 'Text'), ('Audio', 'Audio'), ('Doc', 'Doc'), ('Video', 'Video'), ('Other', 'Other')], max_length=50)),
                ('channelType', models.CharField(choices=[('Feed-ATOM', 'Feed-ATOM'), ('Feed-RSS', 'Feed-RSS'), ('Email', 'Email'), ('Web', 'Web')], max_length=50, null=True)),
                ('contentLocation', models.CharField(max_length=254, null=True)),
                ('contentItemReceiveDate', models.DateField(null=True)),
                ('contentItemPublishDate', models.CharField(max_length=50, null=True)),
                ('contentItemUniqueID', models.IntegerField(blank=True, default=0, null=True)),
                ('contentItemURL', models.CharField(max_length=254)),
                ('contentDescription', models.TextField(null=True)),
                ('contentAttachment', models.BinaryField(null=True)),
            ],
            options={
                'db_table': 'content_item',
            },
        ),
        migrations.CreateModel(
            name='ContentItemActivityType',
            fields=[
                ('contentItemActivityTypeID', models.AutoField(primary_key=True, serialize=False)),
                ('contentItemActivityType', models.CharField(choices=[('Filtering', 'Filtering'), ('Categorization', 'Categorization'), ('Extraction', 'Extraction'), ('QC', 'QC')], max_length=50, null=True)),
            ],
            options={
                'db_table': 'content_item_activity_type',
            },
        ),
        migrations.CreateModel(
            name='ContentItemHistory',
            fields=[
                ('contentItemID', models.AutoField(primary_key=True, serialize=False)),
                ('contentItemActivityDate', models.DateField(null=True)),
                ('contentItemActivityActor', models.IntegerField(blank=True, default=0, null=True)),
                ('contentItemActivityType', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.ContentItemActivityType')),
            ],
            options={
                'db_table': 'content_item_history',
            },
        ),
        migrations.CreateModel(
            name='ContentItemType',
            fields=[
                ('contentItemTypeID', models.AutoField(primary_key=True, serialize=False)),
                ('contentItemType', models.CharField(choices=[('News', 'News'), ('Press Release', 'Press Release'), ('Regulatory Filing', 'Regulatory Filing'), ('Opinion', 'Opinion'), ('Other', 'Other')], max_length=50)),
            ],
            options={
                'db_table': 'content_item_type',
            },
        ),
        migrations.CreateModel(
            name='ContentPayload',
            fields=[
                ('contentItemID', models.AutoField(primary_key=True, serialize=False)),
                ('contentPayload', models.TextField(null=True)),
            ],
            options={
                'db_table': 'content_payload',
            },
        ),
        migrations.CreateModel(
            name='ContentProvider',
            fields=[
                ('contentProviderID', models.AutoField(primary_key=True, serialize=False)),
                ('contentProviderName', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'content_provider',
            },
        ),
        migrations.CreateModel(
            name='ContentSource',
            fields=[
                ('contentSourceID', models.AutoField(primary_key=True, serialize=False)),
                ('channelType', models.CharField(choices=[('Feed-ATOM', 'Feed-ATOM'), ('Feed-RSS', 'Feed-RSS'), ('Email', 'Email'), ('Web', 'Web')], max_length=50)),
                ('contentLocation', models.CharField(max_length=100)),
                ('isTracked', models.NullBooleanField()),
                ('trackStartDate', models.DateField(blank=True, null=True)),
                ('trackEndDate', models.DateField(blank=True, null=True)),
                ('contentProvider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.ContentProvider')),
            ],
            options={
                'db_table': 'content_source',
            },
        ),
        migrations.CreateModel(
            name='ContentType',
            fields=[
                ('contentTypeID', models.AutoField(primary_key=True, serialize=False)),
                ('contentType', models.CharField(choices=[('Text', 'Text'), ('Audio', 'Audio'), ('Doc', 'Doc'), ('Video', 'Video'), ('Other', 'Other')], max_length=50)),
            ],
            options={
                'db_table': 'content_type',
            },
        ),
        migrations.CreateModel(
            name='DataContentAssoc',
            fields=[
                ('dataItemID', models.AutoField(primary_key=True, serialize=False)),
                ('contentItem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.ContentItem')),
            ],
            options={
                'db_table': 'data_content_assoc',
            },
        ),
        migrations.CreateModel(
            name='DataItemCategoryAssoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categories', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Categories')),
                ('dataItemID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.DataContentAssoc')),
            ],
            options={
                'db_table': 'data_item_category_assoc',
            },
        ),
        migrations.CreateModel(
            name='DataItemEntityAssoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataItemID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.DataContentAssoc')),
            ],
            options={
                'db_table': 'data_item_entity_assoc',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('entityName', models.CharField(max_length=50, null=True)),
                ('hasParent', models.NullBooleanField()),
                ('parentEntityID', models.IntegerField(blank=True, default=0, null=True)),
                ('parentEntityName', models.CharField(blank=True, max_length=50, null=True)),
                ('isTracked', models.NullBooleanField()),
                ('trackStartDate', models.DateField(blank=True, null=True)),
                ('trackEndDate', models.DateField(blank=True, null=True)),
                ('category', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Categories')),
            ],
            options={
                'db_table': 'entity',
            },
        ),
        migrations.CreateModel(
            name='EntityType',
            fields=[
                ('entityTypeID', models.AutoField(primary_key=True, serialize=False)),
                ('entityType', models.CharField(choices=[('Company', 'Company'), ('Regulator', 'Regulator'), ('SRO', 'SRO'), ('Trade Body', 'Trade Body'), ('Other', 'Other'), ('Bank', 'Bank')], max_length=50)),
            ],
            options={
                'db_table': 'entity_type',
            },
        ),
        migrations.CreateModel(
            name='EventKeywords',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'event_keywords',
                'verbose_name_plural': 'eventkeywords',
            },
        ),
        migrations.CreateModel(
            name='FilingItem',
            fields=[
                ('contentItemID', models.AutoField(primary_key=True, serialize=False)),
                ('regContentProviderName', models.CharField(max_length=50, null=True)),
                ('regulatorFilingNumber', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'filing_item',
            },
        ),
        migrations.CreateModel(
            name='Keywords',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('keywordName', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'keywords',
                'verbose_name_plural': 'keywords',
            },
        ),
        migrations.CreateModel(
            name='RegulatorFilingType',
            fields=[
                ('regFilingTypeID', models.AutoField(primary_key=True, serialize=False)),
                ('regFilingType', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'regulator_filing_type',
            },
        ),
        migrations.CreateModel(
            name='UserFavorites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemFavoriteStatus', models.BooleanField()),
                ('dataContentAssoc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.DataContentAssoc')),
            ],
            options={
                'db_table': 'user_favorites',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('userID', models.AutoField(primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=20)),
                ('userFirstName', models.CharField(max_length=50, null=True)),
                ('userLastName', models.CharField(max_length=50, null=True)),
                ('userEmail', models.EmailField(max_length=254)),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='UserWatchlist',
            fields=[
                ('watchlistID', models.AutoField(primary_key=True, serialize=False)),
                ('watchlistName', models.CharField(max_length=50, null=True)),
                ('isActive', models.BooleanField()),
                ('wLActiveStartDate', models.DateField()),
                ('wLActiveEndDate', models.DateField()),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Users')),
            ],
            options={
                'db_table': 'user_watchlist',
            },
        ),
        migrations.CreateModel(
            name='UserWatchlistDetails',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('keywordName', models.CharField(max_length=50)),
                ('categories', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Categories')),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Entity')),
                ('keywords', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Keywords')),
                ('userWatchlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.UserWatchlist')),
                ('users', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Users')),
            ],
            options={
                'db_table': 'user_watchlist_details',
            },
        ),
        migrations.AddField(
            model_name='userfavorites',
            name='users',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Users'),
        ),
        migrations.AddField(
            model_name='filingitem',
            name='regulatorFilingType',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.RegulatorFilingType'),
        ),
        migrations.AddField(
            model_name='filingitem',
            name='regulatoryContentProviderID',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.ContentProvider'),
        ),
        migrations.AddField(
            model_name='entity',
            name='entityType',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.EntityType'),
        ),
        migrations.AddField(
            model_name='entity',
            name='eventKeywords',
            field=models.ManyToManyField(to='data_persistence.EventKeywords'),
        ),
        migrations.AddField(
            model_name='entity',
            name='keywords',
            field=models.ManyToManyField(to='data_persistence.Keywords'),
        ),
        migrations.AddField(
            model_name='dataitementityassoc',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Entity'),
        ),
        migrations.AddField(
            model_name='dataitemcategoryassoc',
            name='keyword',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Keywords'),
        ),
        migrations.AddField(
            model_name='contentprovider',
            name='entity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data_persistence.Entity'),
        ),
        migrations.AddField(
            model_name='contentitem',
            name='contentSource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_persistence.ContentSource'),
        ),
    ]
